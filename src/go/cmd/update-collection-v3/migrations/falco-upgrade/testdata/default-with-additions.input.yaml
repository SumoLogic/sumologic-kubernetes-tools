## Configure Falco
## Please note that Falco is embedded in this Helm Chart for user convenience only - Sumo Logic does not provide production support for it
## This is an experimental configuration and shouldn't be used in production environment
## https://github.com/falcosecurity/charts/tree/master/falco
falco:
  a: b
  enabled: false
  image:
    c: d
    registry: public.ecr.aws
    repository: sumologic/falco
    # pullSecrets: []

  ## Add kernel-devel package through MachineConfig, required to enable building of missing falco modules (only for OpenShift)
  addKernelDevel: true
  ## Add initContainers to Falco pod
  extraInitContainers:
    ## Add initContainer to wait until kernel-devel is installed on host
    - name: init-falco
      image: public.ecr.aws/docker/library/busybox
      command:
        - 'sh'
        - '-c'
        - |
          while [ -f /host/etc/redhat-release ] && [ -z "$(ls /host/usr/src/kernels)" ] ; do
          echo "waiting for kernel headers to be installed"
          sleep 3
          done
      volumeMounts:
        - mountPath: /host/usr
          name: usr-fs
          readOnly: true
        - mountPath: /host/etc
          name: etc-fs
          readOnly: true
  ## Enable eBPF support for Falco instead of falco-probe kernel module.
  ## Set to true for GKE, for details see:
  ## https://github.com/SumoLogic/sumologic-kubernetes-collection/blob/main/docs/troubleshoot-collection.md#falco-and-google-kubernetes-engine-gke
  # ebpf:
  #   enabled: true
  falco:
    e: f
    jsonOutput: true
    ## The location of the rules file(s). This can contain one or more paths to
    ## separate rules files.
    ## Explicitly add missing /etc/falco/rules.available/application_rules.yaml
    ## before https://github.com/falcosecurity/charts/issues/230 gets resolved.
    rulesFile:
      - /etc/falco/falco_rules.yaml
      - /etc/falco/falco_rules.local.yaml
      - /etc/falco/k8s_audit_rules.yaml
      - /etc/falco/rules.d
      - /etc/falco/rules.available/application_rules.yaml

  customRules:
    ## Mark the following as known k8s api callers:
    ## * fluentd and its plugins from sumologic/kubernetes-fluentd image
    ## * prometheus
    ## * prometheus operator
    ## * telegraf operator
    ## * grafana sidecar
    rules_user_known_k8s_api_callers.yaml: |-
      - macro: user_known_contact_k8s_api_server_activities
        condition: >
          (container.image.repository = "sumologic/kubernetes-fluentd") or
          (container.image.repository = "quay.io/prometheus/prometheus") or
          (container.image.repository = "quay.io/coreos/prometheus-operator") or
          (container.image.repository = "quay.io/influxdb/telegraf-operator") or
          (container.image.repository = "kiwigrid/k8s-sidecar")
    rules_user_sensitive_mount_containers.yaml: |-
      - macro: user_sensitive_mount_containers
        condition: >
          (container.image.repository = "falcosecurity/falco") or
          (container.image.repository = "quay.io/prometheus/node-exporter")
    ## NOTE: kube-proxy not exact matching because of regional ecr e.g.
    ## 602401143452.dkr.ecr.us-west-1.amazonaws.com/eks/kube-proxy
    rules_user_privileged_containers.yaml: |-
      - macro: user_privileged_containers
        condition: >
          (container.image.repository endswith ".amazonaws.com/eks/kube-proxy")
  ebpf:
    g: h
    enabled: true
